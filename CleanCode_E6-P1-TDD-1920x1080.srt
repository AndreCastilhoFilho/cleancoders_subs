1
00:00:00,030 --> 00:00:14,966
episodio dedicado a:
Kent Beck, criador do TDD

2
00:00:16,258 --> 00:00:18,160
Oi, Sou o Tio Bob

3
00:00:18,160 --> 00:00:20,369
E isso é Clean Code

4
00:01:01,772 --> 00:01:07,101
bem vindo ao episódio 6 de clean code

5
00:01:07,101 --> 00:01:09,212
desenvolvimento orientado  a testes

6
00:01:09,212 --> 00:01:13,963
lembra episo dio 5, falamos de Form?

7
00:01:14,978 --> 00:01:17,790
Aprendemos que comentários devem ser raros

8
00:01:17,790 --> 00:01:20,621
porque, até onde é possível,

9
00:01:20,621 --> 00:01:23,753
devemos escrever código que se expressa

10
00:01:23,753 --> 00:01:25,753
para não precisar de comentários

11
00:01:28,196 --> 00:01:31,864
aprendemos que a diciplina
do espaço em branco é importante

12
00:01:31,864 --> 00:01:37,470
aprendemos que devemos tomar cuidado
com nossas linhas em branco e identação

13
00:01:37,470 --> 00:01:41,827
aprendemos que o tamanho dos arquivos devem ser pequenos

14
00:01:41,827 --> 00:01:45,809
e nunca devemos fazer nossos leitores rolar para direita

15
00:01:47,169 --> 00:01:50,670
aprendemos a diferença entre classes e estrutura de dados

16
00:01:50,670 --> 00:01:53,113
e o uso apropriado de cada um

17
00:01:53,113 --> 00:01:56,695
aprendemos que classes nos protege de tipos novos

18
00:01:56,695 --> 00:02:00,326
enquanto estrutura de dados, nos protege de novas funções

19
00:02:02,283 --> 00:02:05,618
aprendemos que fronteiras cruzam nosso sistema

20
00:02:05,618 --> 00:02:08,726
separando abstrações de concretos

21
00:02:09,212 --> 00:02:12,750
e as dependencias do código devem cruzar essas fronteiras

22
00:02:12,750 --> 00:02:15,150
apontando em direção ao lado abstrato

23
00:02:15,150 --> 00:02:17,421
e longe do lado concreto

24
00:02:19,110 --> 00:02:22,781
aprendemos que base de dados não contem objetos de negócio

25
00:02:22,781 --> 00:02:27,347
base de dados contém 
estrutura de dados concretos

26
00:02:27,340 --> 00:02:31,224
portanto, a fronteira entre a aplicaçao e a base de dados

27
00:02:31,224 --> 00:02:34,664
deve ser cruzada, inserindo uma camada

28
00:02:34,664 --> 00:02:37,378
essa camada irá depender da base de dados

29
00:02:37,378 --> 00:02:39,372
e traduzir a estura de dados

30
00:02:39,372 --> 00:02:42,283
em objetos de negócio para a aplicação

31
00:02:42,283 --> 00:02:44,227
a camada deve depender da base de dados

32
00:02:44,227 --> 00:02:46,449
e deve depender da aplicação

33
00:02:46,449 --> 00:02:48,627
a aplicação sendo abstrata

34
00:02:48,627 --> 00:02:50,670
não deve depender da camada

35
00:02:52,670 --> 00:02:55,070
agora, neste episódio

36
00:02:55,070 --> 00:02:58,627
vamos aprender sobre Desenvolvimento orientado a Testes

37
00:03:00,627 --> 00:03:02,160
fascinante

38
00:03:02,160 --> 00:03:06,541
eu não estava ciente que essa técnica
desacreditada ainda estava sendo promovida

39
00:03:07,710 --> 00:03:12,264
é...vamos aprender porque código apodrece

40
00:03:12,264 --> 00:03:15,753
e como um bom conjunto de testes pode eliminar isso

41
00:03:18,313 --> 00:03:21,421
vamos aprender as 3 leis do TDD

42
00:03:21,421 --> 00:03:23,421
leis que são tão estranhas

43
00:03:23,421 --> 00:03:25,120
tão absurdas

44
00:03:25,120 --> 00:03:27,704
tão contra-intuitíveis

45
00:03:27,704 --> 00:03:30,246
que podem até fazer algum sentido

46
00:03:32,486 --> 00:03:35,366
vamos aprender a abordagem passo-a-passo

47
00:03:35,366 --> 00:03:36,744
do TDD

48
00:03:36,744 --> 00:03:41,076
a abordagem vermelho -  verde - refatoração

49
00:03:41,076 --> 00:03:44,652
para escrever testes e manter o código limpo

50
00:03:44,652 --> 00:03:45,409
depois disso

51
00:03:45,409 --> 00:03:49,464
iremos tratar das objeções mais comuns do TDD

52
00:03:51,064 --> 00:03:52,701
de fato, Tio Bob

53
00:03:52,701 --> 00:03:56,449
tem tantas objeções lógicas de TDD

54
00:03:56,449 --> 00:03:59,243
que eu abandonei essa técnica a muito tempo atrás

55
00:03:59,243 --> 00:04:02,984
como vc insiste nessa falácia?

56
00:04:04,498 --> 00:04:08,246
veja, se me der alguns minutos para montar o meu caso

57
00:04:08,246 --> 00:04:11,926
eu irei tratar de todas suas objeções no segmento 6

58
00:04:11,926 --> 00:04:13,926
pode aguentar até lá?

59
00:04:15,587 --> 00:04:17,298
sim, tio Bob

60
00:04:17,298 --> 00:04:19,360
de fato, eu devo

61
00:04:19,766 --> 00:04:22,578
mas se eu não ficar convencido...

62
00:04:23,735 --> 00:04:25,544
finalmente,

63
00:04:25,544 --> 00:04:28,276
depois de tratar dessas objeções

64
00:04:28,276 --> 00:04:30,836
vamos finalizar isso em

65
00:04:30,836 --> 00:04:32,270
profissionalismo,

66
00:04:32,270 --> 00:04:33,655
habilidade

67
00:04:33,655 --> 00:04:35,249
e disciplina

68
00:04:36,670 --> 00:04:39,870
então se segurem em algo bem firme

69
00:04:39,870 --> 00:04:42,633
TDD vai sair hoje a noite!

70
00:04:46,061 --> 00:04:50,240
o nascimento da lua

71
00:04:51,526 --> 00:04:54,627
nossa lua é única no sistema solar

72
00:04:54,627 --> 00:04:56,996
é grande, comparada com a terra

73
00:04:56,996 --> 00:05:01,446
nehum outro planeta tem uma companheira tão grande

74
00:05:01,446 --> 00:05:03,883
todos outros planetas, tem luas bem pequenininhas

75
00:05:03,883 --> 00:05:06,270
comparado ao próprio tamanho

76
00:05:07,273 --> 00:05:10,147
não a Lua, a Lua é grande

77
00:05:10,147 --> 00:05:14,313
3.474 km de diametro

78
00:05:14,313 --> 00:05:17,243
um pouco mais de 1/4 do diametro da terra

79
00:05:17,243 --> 00:05:20,018
pesa oito quintilhões de toneladas

80
00:05:20,010 --> 00:05:23,673
o que é mais ou menos 1.2% a massa da terra

81
00:05:23,673 --> 00:05:24,793
e em sua superficie

82
00:05:24,793 --> 00:05:27,920
a gravidade é mais ou menos 1,6g

83
00:05:29,113 --> 00:05:31,273
somos felizes que a Lua está lá

84
00:05:31,273 --> 00:05:34,584
ter aquele satélite grande nos rodiando

85
00:05:34,584 --> 00:05:36,916
estabilizando a rotação da terra

86
00:05:36,916 --> 00:05:39,513
mantém o polo norte apontando para o norte

87
00:05:39,513 --> 00:05:42,061
e o polo sul apontando para o sul

88
00:05:42,061 --> 00:05:43,803
sem essa estabilidade

89
00:05:43,803 --> 00:05:46,609
a terra iria balançar igual um peão

90
00:05:46,609 --> 00:05:50,947
e isso iria fazer o clima muito mais variável do que já é

91
00:05:50,947 --> 00:05:54,726
é questionável se a vida poderia evoluir

92
00:05:54,726 --> 00:05:58,092
sem a influencia de estabilidade da Lua

93
00:06:00,196 --> 00:06:03,840
claro que somos gratos por mais do que apenas clima estável

94
00:06:03,840 --> 00:06:08,535
a lua pode ter sido de grande importancia para o início da vida

95
00:06:08,535 --> 00:06:12,012
as ondas que a lua levanta nos oceanos

96
00:06:12,012 --> 00:06:14,141
cria um efeito agitado

97
00:06:14,141 --> 00:06:15,913
especialmente nas linhas costeiras

98
00:06:15,913 --> 00:06:19,378
isso pode ter ajudado a misturar a sopa primordial

99
00:06:19,378 --> 00:06:21,378
que deu origem a nós

100
00:06:23,095 --> 00:06:25,003
mas por que temos essa Lua?

101
00:06:25,003 --> 00:06:27,667
de onde a Lua veio ?

102
00:06:27,667 --> 00:06:30,572
foi originada da terra pela força centrípeta

103
00:06:30,572 --> 00:06:34,892
porque a terra girava muito rápida quando se formou?

104
00:06:34,892 --> 00:06:38,203
se foi, então por que a Lua orbita

105
00:06:38,203 --> 00:06:40,000
no plano da eclíptica?

106
00:06:40,000 --> 00:06:42,781
no plano de todos os outros planetas

107
00:06:42,781 --> 00:06:45,643
se a lua se originou da terra

108
00:06:45,643 --> 00:06:49,316
ela não orbitaria no plano do equador da terra?

109
00:06:50,730 --> 00:06:55,630
então talvez a lua fosse um asteroide ou um planeta menor

110
00:06:55,630 --> 00:06:59,427
que foi capturado pela gravidade da terra a muito tempo atrás

111
00:06:59,427 --> 00:07:03,950
isso explicaria porque a lua orbita na eclíptica

112
00:07:03,950 --> 00:07:08,123
mas não pode explicar porque a orbita da lua é circular

113
00:07:08,123 --> 00:07:10,455
ou porque é tão próxima da terra

114
00:07:10,455 --> 00:07:15,470
e não pode explicar porque a rotação da lua está travada com a terra

115
00:07:16,024 --> 00:07:17,556
um corpo capturado

116
00:07:17,556 --> 00:07:21,144
deveria ter uma orbita distante e alongada

117
00:07:21,144 --> 00:07:21,163
e sua rotação não deveria estar bem travada
deveria ter uma orbita distante e alongada

118
00:07:21,163 --> 00:07:24,683
e sua rotação não deveria estar bem travada

119
00:07:25,800 --> 00:07:29,212
a lua e a terra tem a mesma proporçao de isótopos

120
00:07:29,212 --> 00:07:32,455
que significa que muito provavelmente se formaram

121
00:07:32,455 --> 00:07:35,753
da mesma parte da nebulosa solar

122
00:07:35,753 --> 00:07:40,560
os átomos tem a mesma proporção de isótopos

123
00:07:40,560 --> 00:07:43,741
então talvez a terra e a lua são irmão e irmã

124
00:07:43,741 --> 00:07:46,670
talvez se formaram ao mesmo tempo

125
00:07:46,941 --> 00:07:48,461
o problema disso é

126
00:07:48,461 --> 00:07:52,012
que a lua é muito menos densa que a terra

127
00:07:52,012 --> 00:07:54,713
a terra tem um núcleo de ferro gigante

128
00:07:54,713 --> 00:07:56,978
a lua aparentemente não tem

129
00:07:56,978 --> 00:07:59,076
de fato, a lua parece ser feita

130
00:07:59,076 --> 00:08:02,270
do mesmo material da crosta da terra

131
00:08:02,270 --> 00:08:04,572
silicatos de densidade baixa

132
00:08:04,572 --> 00:08:08,012
se se formaram da mesma parte da nebulosa solar

133
00:08:08,012 --> 00:08:10,689
por que a lua não tem nenhum ferro?

134
00:08:12,338 --> 00:08:16,098
a resposta atual favorita para essa pergunta é alarmante

135
00:08:16,098 --> 00:08:20,676
e levou bastante tempo para os astronomos elaborar os detalhes

136
00:08:22,615 --> 00:08:25,618
4.5 bilhões de anos atrás

137
00:08:25,618 --> 00:08:28,861
apenas 30 milhões de anos antes da terra se formar

138
00:08:28,861 --> 00:08:31,372
e enquanto ainda estava se esfriando

139
00:08:31,372 --> 00:08:31,390
da violência da sua formação
e enquanto ainda estava se esfriando

140
00:08:31,390 --> 00:08:33,723
da violência da sua formação

141
00:08:33,723 --> 00:08:36,406
o planeta do tamanho de marte

142
00:08:36,676 --> 00:08:38,861
bateu nela

143
00:08:40,012 --> 00:08:43,415
a energia liberada por essa colisão foi enorme

144
00:08:43,415 --> 00:08:47,230
derreteu os 2 corpos antes mesmo da colisão se completar

145
00:08:47,230 --> 00:08:50,769
os 2 nucleos de ferro densos dos dois planetas

146
00:08:50,769 --> 00:08:56,861
bateram atravessando as crostas e se
fundiram em um único corpo derretido

147
00:08:56,861 --> 00:09:00,695
mas os silicatos de fora da colisão espirraram

148
00:09:00,695 --> 00:09:04,258
e formaram um anel circular em volta da terra

149
00:09:04,258 --> 00:09:07,052
esse anel circular se aderiram aos poucos

150
00:09:07,052 --> 00:09:09,052
em nossa Lua

151
00:09:10,812 --> 00:09:14,566
isso explica porque a proporçao isotópica dos 2 mundos

152
00:09:14,566 --> 00:09:16,178
são quase identicos

153
00:09:16,178 --> 00:09:19,483
eles se formaram da mistura derretida

154
00:09:19,483 --> 00:09:22,849
também explica porque a lua não tem nenhum núcleo de ferro

155
00:09:22,849 --> 00:09:25,858
o ferro mais denso ficou na terra

156
00:09:25,858 --> 00:09:27,009
e finalmente

157
00:09:27,009 --> 00:09:32,295
explica porque a orbita da lua está na eclíptica e é circular

158
00:09:32,295 --> 00:09:36,627
está na eclíptica, porque a colisão ocorreu na ecliptica

159
00:09:36,627 --> 00:09:40,184
o espirro de materiais na formação do anel

160
00:09:40,184 --> 00:09:41,913
ocorreu na eclíptica

161
00:09:41,913 --> 00:09:42,640
e depois

162
00:09:42,640 --> 00:09:44,566
força de atrito dentro do anel

163
00:09:44,566 --> 00:09:47,944
circularizaram todas as órbitas das partículas do anel

164
00:09:47,944 --> 00:09:52,387
deixando a lua em uma orbita eclíptica circular

165
00:09:53,366 --> 00:09:57,267
de fato, a lua era muito mais próxima do que é hoje

166
00:09:57,267 --> 00:10:00,153
Acoplamento de maré seria quase imeditado

167
00:10:00,153 --> 00:10:01,273
desde então, é claro

168
00:10:01,273 --> 00:10:03,538
a Lua tem se afastado por centimetros da terra

169
00:10:03,538 --> 00:10:08,055
roubando gradualmente impulso da rotação da terra

170
00:10:08,055 --> 00:10:10,381
nos últimos bilhões de anos

171
00:10:10,381 --> 00:10:15,366
a duração do dia cresceu de 5 horas para sua atual de 24

172
00:10:15,366 --> 00:10:19,280
leva esse tanto para a lua chegar na sua distância atual.

173
00:10:20,812 --> 00:10:22,996
então isso que aconteceu de verdade ?

174
00:10:22,996 --> 00:10:27,212
bem, é a explicação que mais se aproxima das evidências no momento

175
00:10:27,704 --> 00:10:30,036
talvez nunca saberemos os detalhes precisos

176
00:10:30,036 --> 00:10:32,141
de como a lua se formou

177
00:10:32,141 --> 00:10:33,858
mas podemos imaginar

178
00:10:33,858 --> 00:10:40,584
pensa como seria maneiro ficar do
lado de fora e assistir essa colisão.

179
00:10:45,083 --> 00:10:48,510
medo e código podre

180
00:10:49,421 --> 00:10:50,670
código apodrece

181
00:10:51,021 --> 00:10:52,615
todo mundo já viu

182
00:10:52,615 --> 00:10:55,476
sistemas que começam com uma boa modelagem

183
00:10:55,476 --> 00:10:57,224
com um código relativamente limpo

184
00:10:57,224 --> 00:11:00,043
eventualmente, degrada com o tempo

185
00:11:00,043 --> 00:11:03,230
o código fica embaralhado, deformado e deturpado

186
00:11:03,230 --> 00:11:06,689
começa a feder igual carne podre

187
00:11:08,572 --> 00:11:10,067
enquanto o design apodrece

188
00:11:10,067 --> 00:11:13,661
se torna rígido, frágil e imóvel

189
00:11:13,660 --> 00:11:15,144
quando precisa fazer uma alteração

190
00:11:15,144 --> 00:11:17,489
vc não pode alterar somente em um lugar

191
00:11:17,489 --> 00:11:20,603
invés disso, vc precisa mexer no código em vários lugares

192
00:11:20,603 --> 00:11:22,233
e cada vez que mexe no código

193
00:11:22,233 --> 00:11:25,636
vc arrisca quebrá-lo em mais lugares

194
00:11:25,636 --> 00:11:27,680
degugar se torna complicado

195
00:11:27,680 --> 00:11:32,523
estimativas e temperamento sobem e o medo domina

196
00:11:34,369 --> 00:11:37,052
porque permitimos essa podridão persistir

197
00:11:37,052 --> 00:11:40,744
porque não consertamos, limpando o código

198
00:11:42,658 --> 00:11:45,569
porque, tio bob, se tentarmos limpar

199
00:11:45,569 --> 00:11:47,403
permitimos que quebre

200
00:11:47,403 --> 00:11:50,658
e então os agonizadores serão acionados

201
00:11:52,190 --> 00:11:55,563
agonizadores...certo

202
00:11:55,563 --> 00:11:59,261
nós não limpamos porque temos medo

203
00:11:59,261 --> 00:12:02,916
já pegou algum código que era feio

204
00:12:02,916 --> 00:12:07,507
e seu primeiro pensamento foi "uau eu deveria limpar isso"

205
00:12:07,507 --> 00:12:10,892
e o próximo pensamento foi "eu não vou tocar nisso"

206
00:12:10,892 --> 00:12:15,249
porque vc sabe se mexer vai quebrar

207
00:12:15,249 --> 00:12:19,046
e se vc quebrar, se tornará seu

208
00:12:20,683 --> 00:12:25,058
então vc se distancia do código

209
00:12:25,366 --> 00:12:28,430
seu medo te previne de limpá-lo

210
00:12:28,430 --> 00:12:31,520
e vc o deixa lá no sistema

211
00:12:31,520 --> 00:12:34,996
para degradar lentamente em caos

212
00:12:36,412 --> 00:12:38,960
e essa podridão nos deixa lento

213
00:12:38,960 --> 00:12:40,695
deixa lento todo mundo

214
00:12:40,690 --> 00:12:42,400
alterações que deveriam levar dias

215
00:12:42,400 --> 00:12:44,295
levam semanas

216
00:12:44,295 --> 00:12:46,720
enquanto nossa incerteza do código base cresce

217
00:12:46,720 --> 00:12:48,024
nossas estimativas tbem sobem

218
00:12:48,024 --> 00:12:50,498
e ainda assim nós erramos elas

219
00:12:50,498 --> 00:12:57,070
o projeto desce em um atoleiro de código podre e bagunçado

220
00:13:02,412 --> 00:13:04,658
algumas vezes a bagunça se torna tão ruim

221
00:13:04,650 --> 00:13:09,932
que contemplamos um esforço dedicado para limpá-lo

222
00:13:09,932 --> 00:13:15,156
tiramos um dia, semana ou mais

223
00:13:15,156 --> 00:13:17,249
para fazer um esforço concentrado

224
00:13:17,249 --> 00:13:19,458
para limpar o código

225
00:13:20,664 --> 00:13:22,270
no começo, nossos empregadores

226
00:13:22,270 --> 00:13:26,566
podem até apoiar essa idéia de esforço para limpeza

227
00:13:26,566 --> 00:13:31,058
até porque, eles estão desesperados para
ver algum tipo melhoria na produtividade

228
00:13:31,058 --> 00:13:32,455
e nós prometemos a eles

229
00:13:32,455 --> 00:13:34,332
que se pudessemos limpar

230
00:13:34,332 --> 00:13:36,006
então seriamos mais rápidos

231
00:13:36,006 --> 00:13:37,870
e nossas estimativas iriam diminuir

232
00:13:39,723 --> 00:13:43,421
mas limpar código é difício e cheio de riscos

233
00:13:43,421 --> 00:13:44,769
quando limpamos um módulo

234
00:13:44,769 --> 00:13:48,818
não temos nenhuma forma de saber se
aquele módulo ainda funciona bem

235
00:13:48,818 --> 00:13:54,596
talvez introduzímos bugs sutis ou
condições de concorrência ou corrupção de dados

236
00:13:56,166 --> 00:14:00,676
quanto mais limpamos, mais arriscado a situação se torna

237
00:14:00,676 --> 00:14:03,495
os testes manuais de ad hoc que fazemos

238
00:14:03,495 --> 00:14:06,221
para ter certeza que o sistema se comporta apropriadamente

239
00:14:06,221 --> 00:14:10,301
começa a falhar por razões que não conseguimos explicar

240
00:14:10,301 --> 00:14:11,680
nós começamos a debugar

241
00:14:11,680 --> 00:14:14,036
e o tempo de debug  cresce

242
00:14:14,036 --> 00:14:19,335
e enquanto cresce, consome o tempo que
pensávamos que tinhamos para limpar

243
00:14:21,009 --> 00:14:23,390
depois de semanas de limpeza e debugar

244
00:14:23,390 --> 00:14:25,507
nosso tempo finalmente acaba

245
00:14:25,500 --> 00:14:28,861
e apesar que fizemos menos limpeza do que gostaríamos

246
00:14:28,861 --> 00:14:31,747
e mais debug do que esperávamos

247
00:14:31,747 --> 00:14:34,892
nós achamos que o sistema está pelo menos um pouco mais limpo

248
00:14:34,892 --> 00:14:39,870
então entregamos o novo "sistema limpo" para o QA

249
00:14:41,076 --> 00:14:43,138
uma vez que QA pega o novo sistema

250
00:14:43,138 --> 00:14:49,993
eles aplicam seus testes bem manuais e caros de regressão e sistema

251
00:14:49,993 --> 00:14:54,467
e infelizmente eles retornam com uma grande pilha de defeitos

252
00:14:54,467 --> 00:14:59,446
que nossos simples testes de ad hoc nunca conseguiriam achar

253
00:14:59,563 --> 00:15:01,753
esses defeitos são assustadores

254
00:15:01,753 --> 00:15:04,289
eles contém comportamentos inexplicáveis

255
00:15:04,289 --> 00:15:07,298
dados corrompidos e crashes

256
00:15:08,769 --> 00:15:13,273
a lista de novos defeitos é tão grande e tão intrigante

257
00:15:13,273 --> 00:15:17,649
que não sabemos nem como estimar quanto tempo vai levar para consertar

258
00:15:17,649 --> 00:15:21,766
depois de muito choro e ranger dos dentes, nos finalmente concluímos que

259
00:15:21,766 --> 00:15:26,744
a melhor opção é deixar a limpeza de lado

260
00:15:26,744 --> 00:15:30,498
e reverter para os estado de  antes da limpeza

261
00:15:31,716 --> 00:15:33,495
eu frequentemente tenho sido chamado

262
00:15:33,495 --> 00:15:36,240
para mandar um time interio para camera de tortura

263
00:15:36,240 --> 00:15:38,590
por tal fracasso

264
00:15:39,421 --> 00:15:40,750
agora veja,

265
00:15:40,750 --> 00:15:42,873
isso não acontece sempre

266
00:15:42,873 --> 00:15:45,335
mas eu já vi bastante esse cenário

267
00:15:45,335 --> 00:15:48,024
para saber que não são tão incomuns

268
00:15:48,024 --> 00:15:51,329
e depois que já passou por um desses cenários de desastre

269
00:15:51,329 --> 00:15:55,803
é o bastante para te convencer a
nunca mais tentar limpar de novo.

270
00:15:57,255 --> 00:16:01,261
e assim ficamos presos com a bagunça que estamos com medo de limpar

271
00:16:01,261 --> 00:16:04,147
nossas estimativas crescem a cada ano que passa

272
00:16:04,147 --> 00:16:08,369
nossa produtividade continua a cair até o zero

273
00:16:08,369 --> 00:16:11,193
e ainda estamos indefesos para fazer algo

274
00:16:11,193 --> 00:16:13,193
paralizados por nosso medo

275
00:16:15,064 --> 00:16:16,910
a moral da história é

276
00:16:16,910 --> 00:16:18,947
não podemos limpar o código

277
00:16:18,947 --> 00:16:21,766
até eliminar o medo da mudança

278
00:16:23,600 --> 00:16:25,790
eliminar o medo

279
00:16:25,790 --> 00:16:29,790
que idéia fascinante e incomum

280
00:16:31,821 --> 00:16:33,304
Eliminando o medo

281
00:16:35,304 --> 00:16:36,178
e se

282
00:16:36,178 --> 00:16:37,895
tivermos um conjunto de testes

283
00:16:37,895 --> 00:16:40,073
que são tão amplo

284
00:16:40,073 --> 00:16:43,181
que virtualmente nenhum bug poderia escapar

285
00:16:43,181 --> 00:16:48,209
e se esse conjunto de testes
pudessem rodar em uma questão de minutos

286
00:16:48,209 --> 00:16:53,218
e se qualquer programador pudesse rodar esses testes com um mero clique

287
00:16:53,218 --> 00:16:55,563
ou digitando um comando simples

288
00:16:55,563 --> 00:16:59,969
e se esses testes nunca pudesse ficar defasado com o sistema

289
00:16:59,969 --> 00:17:02,824
qual o efeito desse tipo de teste teria

290
00:17:02,824 --> 00:17:06,756
no medo de mudar o código

291
00:17:07,766 --> 00:17:09,236
tio Bob

292
00:17:09,236 --> 00:17:11,624
vc tá desperdiçando meu tempo

293
00:17:11,624 --> 00:17:15,950
tais testes seriam impraticáveis de criar

294
00:17:16,676 --> 00:17:18,055
imprático?

295
00:17:18,055 --> 00:17:19,390
muito pelo contrário

296
00:17:19,390 --> 00:17:20,769
já foi feito

297
00:17:20,769 --> 00:17:22,000
eu já fiz!

298
00:17:23,440 --> 00:17:25,058
de fato

299
00:17:25,575 --> 00:17:27,790
então continue

300
00:17:27,790 --> 00:17:31,698
aqui vc pode ver esses testes rodarem

301
00:17:31,698 --> 00:17:33,458
a aplicação é a FitNess

302
00:17:33,458 --> 00:17:37,316
algo que tenho trabalhado desde 2002

303
00:17:37,316 --> 00:17:39,784
FitNess é um projeto open-source

304
00:17:39,784 --> 00:17:43,193
tem milhares e milhares de usuários

305
00:17:43,193 --> 00:17:46,369
tem 70 mil linhas de código

306
00:17:46,369 --> 00:17:49,673
é um sistema web com um grande middleware

307
00:17:49,673 --> 00:17:51,790
e um back-end de persistência

308
00:17:51,790 --> 00:17:52,880
em resumo

309
00:17:52,880 --> 00:17:55,280
é uma aplicação significante

310
00:17:55,280 --> 00:18:00,720
o tipo de aplicação que pode apodrecer se não tomar cuidado

311
00:18:02,098 --> 00:18:05,538
eu medi a cobertura de código em 90%

312
00:18:05,556 --> 00:18:07,495
na verdade, eu acho que é maior do que isso

313
00:18:07,495 --> 00:18:10,258
porque a maior parte do código,executa fora do processo

314
00:18:10,258 --> 00:18:12,344
em que a ferramenta de cobertura de código não pode ver

315
00:18:12,340 --> 00:18:16,295
então estimo que a cobertura esteja próxima de 95%

316
00:18:17,930 --> 00:18:18,904
o que vc está vendo é

317
00:18:18,904 --> 00:18:20,923
enquanto olha esses testes passarem

318
00:18:20,923 --> 00:18:22,929
é o processo de QA

319
00:18:22,929 --> 00:18:24,584
se esses testes passarem

320
00:18:24,584 --> 00:18:26,092
nós publicamos

321
00:18:26,092 --> 00:18:27,353
não fazemos mais nada

322
00:18:27,353 --> 00:18:28,836
não tem testes manuais

323
00:18:28,836 --> 00:18:29,778
não tem teste de sistema

324
00:18:29,778 --> 00:18:31,544
nenhum outro procedimento

325
00:18:31,544 --> 00:18:33,126
se esse testes passarem

326
00:18:33,126 --> 00:18:35,513
e eles passam em alguns minutos

327
00:18:35,513 --> 00:18:36,935
nós publicamos

328
00:18:38,295 --> 00:18:40,990
isso é quanto nós confiamos nos testes

329
00:18:40,990 --> 00:18:43,680
se passar, publicamos!

330
00:18:44,990 --> 00:18:46,092
agora é verdade

331
00:18:46,092 --> 00:18:48,560
isso é um projeto open-source

332
00:18:48,560 --> 00:18:50,960
se tiver um bug, ninguém morre

333
00:18:50,960 --> 00:18:53,273
milhões de dólares não são perdidos

334
00:18:53,273 --> 00:18:55,852
pelo menos não que eu saiba

335
00:18:55,850 --> 00:18:59,089
e ainda assim, temos milhares e milhares

336
00:18:59,089 --> 00:19:01,052
de usuários entusiastas

337
00:19:01,052 --> 00:19:02,584
e nossa lista de bugs

338
00:19:02,584 --> 00:19:04,473
caberia uma página ou duas

339
00:19:06,098 --> 00:19:07,273
quão grande a lista de bug?

340
00:19:08,123 --> 00:19:10,400
isso vem de irresponsabilidade

341
00:19:10,400 --> 00:19:11,550
e descuido

342
00:19:11,981 --> 00:19:13,944
não estou falando de problemas

343
00:19:13,944 --> 00:19:18,744
não to falando de coisas que o sistema poderia fazer melhor

344
00:19:18,744 --> 00:19:21,144
eu to falando de defeitos

345
00:19:21,144 --> 00:19:23,729
quando vc tem uma lista longa de defeitos

346
00:19:23,729 --> 00:19:24,984
isso só pode significar

347
00:19:24,984 --> 00:19:28,270
que o time de desenvolvimento tem agido de forma não profissional

348
00:19:29,538 --> 00:19:30,929
sim,

349
00:19:30,929 --> 00:19:35,396
tenho mostrado frequentemente meu descontentamento

350
00:19:35,396 --> 00:19:37,476
com grandes listas de bug

351
00:19:37,476 --> 00:19:41,840
e ainda assim, elas continuam a aparecer

352
00:19:41,840 --> 00:19:43,150
no projeto FitNess

353
00:19:43,150 --> 00:19:45,520
mantemos nossa lista de bugs curta

354
00:19:45,520 --> 00:19:49,027
mantendo testes que tem uma cobertura bem alta

355
00:19:49,027 --> 00:19:51,403
e ainda assim execuções bem rápidas

356
00:19:51,403 --> 00:19:56,184
é bem difícil de um defeito passar por esse tipo de defesa

357
00:19:59,501 --> 00:20:01,440
mas manter defeitos sob controle

358
00:20:01,440 --> 00:20:04,892
é apenas um dos benefícios desses testes

359
00:20:04,892 --> 00:20:06,024
outro benefício é

360
00:20:06,024 --> 00:20:09,403
que não temos mais medo de alterar o código

361
00:20:09,403 --> 00:20:12,652
não temos mais medo de limpar

362
00:20:14,184 --> 00:20:15,649
Demonstração

363
00:20:17,593 --> 00:20:18,393
certo

364
00:20:18,393 --> 00:20:19,864
vamos limpar algum código

365
00:20:19,864 --> 00:20:22,572
e vamos limpar sem medo

366
00:20:22,935 --> 00:20:24,818
eu tenho uma função aqui

367
00:20:25,409 --> 00:20:28,320
esta função se chama html

368
00:20:28,320 --> 00:20:30,541
e html tem testes

369
00:20:30,541 --> 00:20:32,713
posso rodar para você

370
00:20:32,713 --> 00:20:35,563
e verá que ele passa

371
00:20:35,803 --> 00:20:39,833
tem uma informação de cobertura de código no lado aqui

372
00:20:39,833 --> 00:20:41,476
percebeu todas essas

373
00:20:41,476 --> 00:20:44,843
barras verdes no lado da função?

374
00:20:44,840 --> 00:20:51,193
isso significa que tempos 100% de cobertura de código neste teste

375
00:20:51,193 --> 00:20:52,190
nesta função

376
00:20:52,190 --> 00:20:55,476
se vc não viu essas barras, bem, elas são um pouco apagadas

377
00:20:55,470 --> 00:20:56,683
e posso te dizer que temos 100% de cobertura
mas eu posso ve-las

378
00:20:56,683 --> 00:20:59,015
e posso te dizer que temos 100% de cobertura

379
00:20:59,015 --> 00:21:01,095
rodamos os testes de novo e pode ver

380
00:21:01,095 --> 00:21:03,483
eles rodam muito bem

381
00:21:04,818 --> 00:21:06,123
esse código tá uma bagunça

382
00:21:06,123 --> 00:21:08,941
tem stringBuffers

383
00:21:08,941 --> 00:21:11,901
tem flags

384
00:21:11,901 --> 00:21:13,852
olha essas flags aqui

385
00:21:13,852 --> 00:21:20,529
tem umas strings que não fazem muito sentido

386
00:21:21,316 --> 00:21:23,107
o que esse código faz

387
00:21:23,100 --> 00:21:27,323
é criar uma string em html

388
00:21:27,323 --> 00:21:30,036
de uma estrutura de dados de...

389
00:21:30,036 --> 00:21:34,258
html tagas, estrutura de dados que representam tags html

390
00:21:34,258 --> 00:21:36,615
vc não precisa entender muito disso

391
00:21:36,615 --> 00:21:39,046
para seguir essa refatoração

392
00:21:39,960 --> 00:21:48,412
perceba que o autor tem algumas funções aqui

393
00:21:48,410 --> 00:21:51,384
eu não gosto da forma que esse particionamento funciona

394
00:21:51,384 --> 00:21:52,658
então eu vou me livrar dele

395
00:21:52,658 --> 00:21:55,138
vou me livrar dele assim:

396
00:21:55,138 --> 00:21:58,781
vou dar inline na addTabs

397
00:21:58,781 --> 00:22:02,572
substituindo todas suas chamadas com sua implementação

398
00:22:02,572 --> 00:22:05,021
vou fazer a mesma coisa com addAttributes

399
00:22:05,021 --> 00:22:08,412
apenas se livrando do particionamento antigo

400
00:22:13,107 --> 00:22:16,313
substituindo todo seu código com sua implementação

401
00:22:16,313 --> 00:22:19,907
e claro, todos os testes passam

402
00:22:19,907 --> 00:22:23,507
agora, eu vou reparticionar isto

403
00:22:23,821 --> 00:22:26,227
essa função html parece ter muitos estados

404
00:22:26,227 --> 00:22:27,390
tem um argumento

405
00:22:27,390 --> 00:22:28,326
tem um StringBuffer

406
00:22:28,326 --> 00:22:30,566
tem esse monte de flags

407
00:22:30,566 --> 00:22:33,833
essa informação de estado, provavelmente pertence em uma classe.

408
00:22:33,833 --> 00:22:36,012
então, a primeira coisa que vou fazer

409
00:22:36,012 --> 00:22:40,356
é cortar toda a implementaçao dessa função

410
00:22:40,356 --> 00:22:41,969
e substituir

411
00:22:43,206 --> 00:22:46,553
por uma instancia de um HtmlFormatter

412
00:22:50,510 --> 00:22:52,769
passando o parametro depth

413
00:22:54,750 --> 00:22:58,960
e vou chamar a função format dentro dela

414
00:22:58,960 --> 00:23:00,504
não existe nenhum HtmlFormatter,

415
00:23:00,504 --> 00:23:02,141
então eu vou cria-lo

416
00:23:02,141 --> 00:23:04,055
como uma classe interna

417
00:23:04,055 --> 00:23:05,981
aqui está

418
00:23:06,855 --> 00:23:11,347
vou criar um field, para o parametro depth

419
00:23:13,907 --> 00:23:16,947
vou voltar para a chamada

420
00:23:16,947 --> 00:23:19,649
vou criar a função format

421
00:23:20,424 --> 00:23:22,356
vai retornar uma string

422
00:23:22,356 --> 00:23:25,809
vou substituir a implementação default

423
00:23:25,809 --> 00:23:29,655
com a implementação que recortei recentemente

424
00:23:29,655 --> 00:23:33,273
acredito que meus testes ainda vão passar

425
00:23:33,273 --> 00:23:34,455
e passam

426
00:23:35,341 --> 00:23:38,658
agora eu tem uma classe para botar toda

427
00:23:38,658 --> 00:23:40,830
aquelas variáveis horríveis

428
00:23:40,830 --> 00:23:42,818
e a primeira coisa que percebo

429
00:23:42,818 --> 00:23:44,836
é que essa aqui se chama buffer

430
00:23:44,836 --> 00:23:46,947
bem.. o que realmente é..

431
00:23:46,947 --> 00:23:49,630
é o html que tem sido acumulado

432
00:23:49,630 --> 00:23:52,184
então eu vou mudar isso para html

433
00:23:53,126 --> 00:23:54,793
a próxima coisa que não gostei

434
00:23:54,793 --> 00:23:56,818
é pelo fato que é um StringBuffer!

435
00:23:56,818 --> 00:24:01,704
hoje em dia, no Java moderno, não precisamos usar StringBuffers

436
00:24:01,704 --> 00:24:05,003
a manipulação de String são rápidas o bastante

437
00:24:05,003 --> 00:24:07,950
elas na verdade usam o StringBuffer debaixo dos panos

438
00:24:07,950 --> 00:24:11,390
o que significa que eu posso tornar html em uma string

439
00:24:11,390 --> 00:24:14,406
claro, isso quebra todas as chamadas de append

440
00:24:14,406 --> 00:24:15,526
mas está tudo bem

441
00:24:15,526 --> 00:24:16,547
o que vou fazer é

442
00:24:16,547 --> 00:24:19,427
encontrar todas as chamadas para append

443
00:24:19,427 --> 00:24:25,593
e vou substituir para uma chamada para +=

444
00:24:31,353 --> 00:24:34,646
esse replace, funciona para alguns, mas não para outros

445
00:24:34,646 --> 00:24:36,750
mas, tem um método para minha loucura

446
00:24:36,750 --> 00:24:39,249
então, apenas veja o que acontece aqui

447
00:24:39,240 --> 00:24:42,356
alguns parecem ok, outros não

448
00:24:42,356 --> 00:24:44,215
claro que tem alguns parenteses sobrando

449
00:24:44,215 --> 00:24:47,360
este aqui, particularmente não funciona

450
00:24:47,360 --> 00:24:49,778
vamos voltar para o topo

451
00:24:49,778 --> 00:24:52,726
qualquer caso onde tinha vários appends

452
00:24:52,726 --> 00:24:53,772
não funciona bem

453
00:24:53,772 --> 00:25:00,880
mas tá tudo bem, pq eu posso pegar
eles e substituir com um simples "+"

454
00:25:04,596 --> 00:25:05,876
última coisa que preciso fazer

455
00:25:05,876 --> 00:25:09,249
é encontrar esses parenteses pendurados

456
00:25:09,249 --> 00:25:12,258
que faço um de cada vez

457
00:25:12,258 --> 00:25:16,246
enquanto rolo para cima

458
00:25:17,476 --> 00:25:21,636
apenas encontrando qualquer lugar,
onde tem um parenteses sobrando

459
00:25:39,981 --> 00:25:43,907
e acredito que os testes ainda vão passar

460
00:25:43,907 --> 00:25:45,187
sim, eles passam

461
00:25:45,187 --> 00:25:48,240
isso significa que posso me livrar desse html.toString

462
00:25:48,240 --> 00:25:50,769
vamos retornar apenas html

463
00:25:51,378 --> 00:25:53,612
e isso passa também

464
00:25:53,612 --> 00:25:54,689
certo

465
00:25:54,689 --> 00:25:56,418
agora

466
00:25:58,420 --> 00:25:59,796
esta chamada bem aqui

467
00:25:59,796 --> 00:26:01,261
esse pequeno loop bem aqui

468
00:26:01,261 --> 00:26:03,833
acho que posso substituir isso por uma função

469
00:26:03,833 --> 00:26:05,415
chamada makeTabs

470
00:26:05,415 --> 00:26:08,535
bem parecida com aquela última, que era addTabs

471
00:26:08,535 --> 00:26:11,335
mas não adiciona a um stringBuffer

472
00:26:11,624 --> 00:26:13,895
a veja, achamaos pelo menos uma a mais

473
00:26:13,895 --> 00:26:16,400
vamos em frente e substituir também

474
00:26:19,686 --> 00:26:27,636
não deveria ser um "=", deve ser um "+="

475
00:26:27,636 --> 00:26:32,178
não deveria passar um html, deixa eu mudar a assinatura

476
00:26:32,178 --> 00:26:35,920
para remover  esse html da chamada

477
00:26:36,436 --> 00:26:38,080
make tabs,

478
00:26:38,080 --> 00:26:41,027
deveria retornar as tabs

479
00:26:44,750 --> 00:26:46,806
e não deveria ser um html

480
00:26:46,806 --> 00:26:49,649
deve ser um tabs

481
00:26:51,563 --> 00:26:54,658
a primeira makeTabs bem no topo

482
00:26:54,701 --> 00:26:57,618
esse aqui eu posso deixar aqui

483
00:26:57,618 --> 00:27:00,566
porque eu posso fazer isso

484
00:27:00,566 --> 00:27:03,015
e isso ainda deve passar

485
00:27:03,015 --> 00:27:04,701
e passa

486
00:27:06,806 --> 00:27:07,593
próximo

487
00:27:12,449 --> 00:27:14,473
eu acho que posso fazer algo desse tipo:

488
00:27:24,135 --> 00:27:27,003
eu acredito que isso é a mesma coisa

489
00:27:27,003 --> 00:27:30,707
eu posso descobrir isso facilmente , rodando os testes

490
00:27:30,707 --> 00:27:33,464
os testes passam bem

491
00:27:33,464 --> 00:27:36,400
então não preciso mais desse comentário

492
00:27:36,400 --> 00:27:37,956
este pequeno código

493
00:27:37,956 --> 00:27:39,864
eu posso remover

494
00:27:39,864 --> 00:27:42,461
posso chamá-lo de

495
00:27:42,461 --> 00:27:44,880
makeHead

496
00:27:48,092 --> 00:27:51,864
e de fato, eu posso até botar alí em cima

497
00:27:53,772 --> 00:27:56,633
sim, isso funciona bem

498
00:27:58,350 --> 00:28:00,584
a proxima coisa é isto

499
00:28:00,584 --> 00:28:02,332
adicionar a tagName

500
00:28:02,332 --> 00:28:06,726
acho que posso extrair isso para uma função "makeTag"

501
00:28:11,483 --> 00:28:16,024
e isso eu acho que posso subir para cá com outro "+"

502
00:28:17,575 --> 00:28:19,329
não ficou bonito?

503
00:28:19,329 --> 00:28:21,452
e agora os atributos

504
00:28:21,452 --> 00:28:25,027
acho que posso extrair isso para uma função

505
00:28:25,027 --> 00:28:28,203
chamada "makeAttributes"

506
00:28:28,203 --> 00:28:31,673
não vou passar a flag html

507
00:28:32,830 --> 00:28:34,043
aqui está o makeAttributes

508
00:28:34,043 --> 00:28:37,255
isso deve ser um "+="

509
00:28:37,255 --> 00:28:40,486
e para a função makeAttributes aqui em baixo

510
00:28:43,316 --> 00:28:46,227
vou transformar isso para attributes

511
00:28:47,089 --> 00:28:49,046
deixa melhor

512
00:28:49,046 --> 00:28:51,193
agora essa função faz mais sentido

513
00:28:51,193 --> 00:28:53,206
volto para o topo

514
00:28:53,206 --> 00:28:56,732
e acho que posso fazer apenas isso

515
00:28:58,492 --> 00:29:00,880
isso passa muito bem

516
00:29:00,880 --> 00:29:02,849
e agora a próxima coisa

517
00:29:02,849 --> 00:29:04,369
esse grande IF

518
00:29:04,369 --> 00:29:06,283
e é um grande IF!

519
00:29:06,283 --> 00:29:08,972
vai desde aqui até aqui embaixo

520
00:29:08,972 --> 00:29:10,916
e olhe esse ELSE que engraçadinho

521
00:29:10,916 --> 00:29:12,750
com isso pendurado aqui

522
00:29:12,750 --> 00:29:15,643
que parece muito com isso

523
00:29:15,643 --> 00:29:18,683
e... isto que acontece aqui:

524
00:29:19,009 --> 00:29:21,587
se não tem nenhum filho

525
00:29:21,587 --> 00:29:25,803
então ele bota um fim para a tag

526
00:29:25,803 --> 00:29:29,273
que não precisa de outra tag de fechamento

527
00:29:29,273 --> 00:29:30,935
mas se há filhos,

528
00:29:30,935 --> 00:29:33,790
então coloca o fechamento simples de tag

529
00:29:33,790 --> 00:29:36,769
e então terá que terminar com

530
00:29:36,769 --> 00:29:38,923
jesus...isso!

531
00:29:38,923 --> 00:29:39,907
então...

532
00:29:39,907 --> 00:29:41,446
eu acho que o que posso fazer..

533
00:29:41,446 --> 00:29:44,043
é simplificar esse tanto de código

534
00:29:44,043 --> 00:29:46,720
multiplicando o IF

535
00:29:46,720 --> 00:29:48,529
então farei isso:

536
00:29:48,529 --> 00:29:54,110
SE hasChildren é verdadeiro

537
00:29:54,110 --> 00:29:56,947
vou pegar essa linha

538
00:29:58,886 --> 00:30:02,221
e botar aqui

539
00:30:03,661 --> 00:30:06,695
e acredito que isso vai passar

540
00:30:06,695 --> 00:30:08,276
e passa

541
00:30:08,276 --> 00:30:13,876
e agora acho que posso pegar esssa cáusula ELSE aqui

542
00:30:15,526 --> 00:30:18,018
e trazer para cá

543
00:30:23,723 --> 00:30:24,984
isso passa

544
00:30:26,276 --> 00:30:27,593
agora

545
00:30:27,593 --> 00:30:28,670
limpar isso um pouco

546
00:30:28,670 --> 00:30:31,956
acho que agora posso pegar isso

547
00:30:33,273 --> 00:30:35,193
e reescrever

548
00:30:35,193 --> 00:30:36,073
assim...

549
00:30:48,473 --> 00:30:49,846
acredito que vai funcionar

550
00:30:49,846 --> 00:30:52,953
vou comentar esse aqui fora

551
00:30:52,953 --> 00:30:54,504
sim, isso passa no teste

552
00:30:54,504 --> 00:30:58,400
que significa que posso me livrar desse código

553
00:30:58,400 --> 00:31:02,418
e agora posso pegar esse tanto aqui

554
00:31:02,418 --> 00:31:04,406
extrair para uma função

555
00:31:04,400 --> 00:31:08,670
chamada makeTagEnd

556
00:31:10,123 --> 00:31:14,116
que aacho que posso puxar para cá

557
00:31:16,781 --> 00:31:18,449
maravilha

558
00:31:18,572 --> 00:31:19,458
agora eu acho

559
00:31:19,458 --> 00:31:22,793
que posso tirar todo esse IF

560
00:31:24,276 --> 00:31:26,135
com tudo isso

561
00:31:26,135 --> 00:31:30,627
e extrair para um método makeChildren

562
00:31:30,627 --> 00:31:33,852
não vou passar o html

563
00:31:36,000 --> 00:31:38,295
isso deve ser um "+="

564
00:31:38,295 --> 00:31:41,329
o html aqui deve ser inicializado

565
00:31:41,329 --> 00:31:45,729
e deve ser chamado de children

566
00:31:45,729 --> 00:31:48,301
isso ainda deve passar

567
00:31:48,523 --> 00:31:49,470
passou

568
00:31:49,969 --> 00:31:52,252
e agora acho que posso fazer isto

569
00:31:56,658 --> 00:31:59,286
esta linha está ficando um pouco grande

570
00:31:59,286 --> 00:32:01,969
vamos ver se conseguimos encurtá-la

571
00:32:01,969 --> 00:32:05,575
que tal isso

572
00:32:12,344 --> 00:32:13,790
assim é melhor

573
00:32:13,790 --> 00:32:15,046
algumas coisas a mais

574
00:32:15,046 --> 00:32:16,541
nos temos o tail e o inline

575
00:32:16,541 --> 00:32:18,621
acho que posso fazer eles bem simples

576
00:32:38,830 --> 00:32:40,990
acho que isso é um pouco óbvio

577
00:32:40,990 --> 00:32:42,990
isso ainda deve funcionar

578
00:32:44,036 --> 00:32:46,683
funciona, eu posso eliminar o comentário

579
00:32:46,683 --> 00:32:50,283
posso pegar esse tanto aqui

580
00:32:50,283 --> 00:32:53,520
e chamar de makeTail

581
00:32:53,760 --> 00:32:56,307
e fazer apenas isso

582
00:33:02,498 --> 00:33:04,738
isso ainda deve funcionar

583
00:33:06,760 --> 00:33:11,544
e provavelmente eu posso fazer a
mesma coisa com esse isInline

584
00:33:17,815 --> 00:33:22,344
se for isInline, entao retornaremos nada

585
00:33:25,144 --> 00:33:27,440
do contrário, será endl

586
00:33:30,073 --> 00:33:33,796
e se fiz isso certo, então deve passar

587
00:33:35,384 --> 00:33:38,332
passou, então posso tirar isso

588
00:33:38,332 --> 00:33:43,138
e tornar isso em uma funçao chamada makeLineEnd

589
00:33:48,123 --> 00:33:51,132
isso pode subir para cá

590
00:33:53,704 --> 00:33:56,061
isso passa, que legal

591
00:33:58,529 --> 00:34:01,513
parece que está faltando aquela tag final

592
00:34:01,513 --> 00:34:05,809
provavelmente ficou sobrando aqui no makeChildren

593
00:34:05,809 --> 00:34:07,686
a é, aqui está

594
00:34:08,400 --> 00:34:10,529
feio, feio, feio

595
00:34:11,280 --> 00:34:14,560
eu provavelmente deveria fazer isso:

596
00:34:16,480 --> 00:34:20,024
vamos tirar esse código daqui

597
00:34:21,316 --> 00:34:26,147
isso estava nesse IF

598
00:34:29,809 --> 00:34:32,012
vamos retornar de volta para cá

599
00:34:32,276 --> 00:34:34,609
e faremos isso

600
00:34:38,646 --> 00:34:41,790
eu quero isso bem aqui

601
00:34:53,796 --> 00:34:57,495
isso deve ser html

602
00:34:59,440 --> 00:35:02,307
mas isso só deve ser feito SE

603
00:35:02,307 --> 00:35:04,307
existir filhos

604
00:35:10,400 --> 00:35:12,972
vamos ver se isso passa

605
00:35:13,581 --> 00:35:14,658
sim

606
00:35:14,730 --> 00:35:18,276
mas acho que posso rescrever isso melhor

607
00:35:35,630 --> 00:35:38,947
isso significa que não preciso disso

608
00:35:45,169 --> 00:35:47,310
e agora isso pode ser

609
00:35:47,655 --> 00:35:49,987
makeEndTag

610
00:35:54,049 --> 00:35:57,113
que pode ser levado bem aqui

611
00:35:59,027 --> 00:36:02,104
e agora isso pode ser levado aqui

612
00:36:17,489 --> 00:36:19,544
e isso deve passar ainda

613
00:36:21,544 --> 00:36:25,858
e agora, acho que não vamos
precisar mais dessa variavel html

614
00:36:27,452 --> 00:36:29,735
e vamos retornar

615
00:36:43,144 --> 00:36:44,486
não é prazeroso?

616
00:36:44,486 --> 00:36:48,221
é uma função muito melhor do que era antes

617
00:36:48,221 --> 00:36:49,421
nenhuma variável estranha

618
00:36:49,421 --> 00:36:50,166
nenhum flag

619
00:36:50,166 --> 00:36:50,769
nada

620
00:36:50,769 --> 00:36:52,572
vc lê e faz completo sentido

621
00:36:52,572 --> 00:36:56,824
não precisa ficar olhando a fundo
para saber o que está acontecendo

622
00:36:56,824 --> 00:36:58,996
se quiser é claro, vc pode.

623
00:36:58,996 --> 00:37:03,347
e ainda temos essa função horrível para refatorar

624
00:37:03,347 --> 00:37:05,046
mas podemos continuar isso

625
00:37:05,046 --> 00:37:06,473
não vou aqui, mas

626
00:37:06,473 --> 00:37:08,627
se quiser vc pode.

627
00:37:09,052 --> 00:37:11,181
isso, foi uma limpeza

628
00:37:11,181 --> 00:37:13,403
percebeu como foi destemido

629
00:37:13,403 --> 00:37:15,200
percebeu como não me preocupei

630
00:37:15,200 --> 00:37:18,233
meus testes estavam me cobrindo o tempo todo

631
00:37:18,929 --> 00:37:22,393
testes, permitem vc limpar o seu código

632
00:37:25,409 --> 00:37:27,661
que bela limpeza

633
00:37:27,661 --> 00:37:30,547
sem complicaçoes, sem medo

634
00:37:30,547 --> 00:37:34,480
e tudo por causa desses adoráveis testes

635
00:37:35,883 --> 00:37:37,329
O mundo real

636
00:37:39,470 --> 00:37:42,603
ok, talvez vc esteja pensando isto:

637
00:37:42,603 --> 00:37:46,560
isso tudo é bem legal para um projeto open source

638
00:37:46,560 --> 00:37:49,673
onde todo mundo trabalha de graça

639
00:37:49,670 --> 00:37:52,941
masno mundo real de desenvolvimento de software

640
00:37:52,941 --> 00:37:54,209
um conjunto de testes como esse

641
00:37:54,209 --> 00:37:58,393
seria muito caro e demorado para criar

642
00:37:59,790 --> 00:38:02,326
isso é pura bobagem

643
00:38:02,326 --> 00:38:04,793
esses testes nos salvaram um monte de tempo

644
00:38:04,793 --> 00:38:06,953
e tem salvado desde o primeiro dia

645
00:38:06,953 --> 00:38:09,360
da primeira linha de código até agora

646
00:38:09,360 --> 00:38:12,233
FitNess tem sido um projeto em TDD

647
00:38:12,233 --> 00:38:14,547
e podemos desenvolve-lo mais rápido e com segurança

648
00:38:14,547 --> 00:38:17,532
do que qualquer projeto anterior que já trabalhei

649
00:38:17,532 --> 00:38:20,609
tem menos defeitos, debugamos menos

650
00:38:20,609 --> 00:38:22,116
codificamos mais rápido

651
00:38:22,116 --> 00:38:23,735
codificamos melhor

652
00:38:23,735 --> 00:38:28,467
em resumo, ganhamos de lavada
de projetos que não tem testes

653
00:38:29,501 --> 00:38:31,963
então, nós precisamos desse conjunto de testes

654
00:38:31,963 --> 00:38:33,661
eles mitigam defeitos

655
00:38:33,661 --> 00:38:35,655
encolhe o tempo de debug

656
00:38:35,655 --> 00:38:37,600
acelera o desenvolvimento

657
00:38:37,600 --> 00:38:41,156
e elimina o medo de limpar o código

658
00:38:42,504 --> 00:38:43,876
tio Bob

659
00:38:43,876 --> 00:38:46,184
sua paixão é atraente

660
00:38:46,184 --> 00:38:48,800
mas vc não disse nada até agora

661
00:38:48,800 --> 00:38:50,750
que responde minhas objeções

662
00:38:50,750 --> 00:38:51,415
de fato,

663
00:38:51,415 --> 00:38:53,735
vc ainda não explicou como tal conjunto de testes

664
00:38:53,735 --> 00:38:56,018
é mesmo prático de criar

665
00:38:56,018 --> 00:38:57,667
como tio Bob

666
00:38:57,667 --> 00:39:01,113
vc cria um conjunto de testes tão amplo?

667
00:39:04,600 --> 00:39:07,593
as três leis do TDD

668
00:39:09,760 --> 00:39:11,120
desenvolvimento orientado a testes

669
00:39:11,120 --> 00:39:12,707
é uma diciplina

670
00:39:12,707 --> 00:39:13,858
e como uma diciplina

671
00:39:13,858 --> 00:39:16,455
tem um conjunto de regras

672
00:39:16,455 --> 00:39:17,710
abandonar essas regras

673
00:39:17,710 --> 00:39:21,366
e escrever um monte de testes quando vc quer

674
00:39:21,366 --> 00:39:22,584
não é uma diciplina

675
00:39:22,584 --> 00:39:25,741
e não te torna um desenvolvedor orientado a testes

676
00:39:27,187 --> 00:39:28,769
pense nessa diciplina

677
00:39:28,769 --> 00:39:34,658
como o médico que lava as mãos antes de examinar

678
00:39:34,658 --> 00:39:39,009
ou a diciplina de manejar uma arma em um campo de tiro

679
00:39:39,009 --> 00:39:43,040
ou a diciplina de comportamento em uma academia de artes marciais

680
00:39:43,040 --> 00:39:46,910
essas diciplinas podem parecer extremas e rigorosas

681
00:39:46,910 --> 00:39:50,996
mas são impostas, para garantir seguraça e efetividade

682
00:39:52,584 --> 00:39:55,236
as primeiras 3 diciplinas de TDD,

683
00:39:55,236 --> 00:39:58,209
são conhecidas como as 3 leis

684
00:39:58,209 --> 00:39:59,993
como qualquer diciplina

685
00:39:59,993 --> 00:40:01,569
para o não-iniciado

686
00:40:01,569 --> 00:40:04,652
essas leis, parecem extremas e absurdas

687
00:40:04,652 --> 00:40:06,381
igual a diciplina de lavar as mãos

688
00:40:06,381 --> 00:40:10,240
parecia extrema para os médico em meados de 1800

689
00:40:11,606 --> 00:40:13,261
a primeira lei é

690
00:40:13,261 --> 00:40:16,178
vc não tem permissão para escrever nenhum código de produção

691
00:40:16,178 --> 00:40:17,833
até que vc tenha primeiro tenha escrito

692
00:40:17,833 --> 00:40:20,449
um teste de unidade que falha

693
00:40:21,600 --> 00:40:23,741
ilógico, tio Bob

694
00:40:23,741 --> 00:40:26,510
testes, devem ser escritos depois do código

695
00:40:26,738 --> 00:40:30,590
como pode escrever um teste se não sabe o que está testando?

696
00:40:31,187 --> 00:40:32,418
você vê?!

697
00:40:32,418 --> 00:40:33,593
eu te disse

698
00:40:33,593 --> 00:40:36,258
parece errado, não parece?

699
00:40:36,258 --> 00:40:41,046
é como quando alguem te ensina como pegar em taco de golf

700
00:40:41,046 --> 00:40:44,652
ou a primeira vez que seu professor de bateria te mostra

701
00:40:44,652 --> 00:40:46,523
como segurar as baquetas

702
00:40:46,520 --> 00:40:51,870
ou a primeira vez você coloca os
dedos na fileira inicial de um teclado qwerty

703
00:40:51,870 --> 00:40:54,590
parece errado no começo

704
00:40:54,590 --> 00:40:56,036
mas não fique muito empolgado

705
00:40:56,036 --> 00:40:59,741
porque a segunda lei vai parecer bem pior

706
00:41:01,224 --> 00:41:02,830
a segunda lei é

707
00:41:02,830 --> 00:41:06,916
vc não tem permissão para escrever
mais de um teste de unidade que falha

708
00:41:06,916 --> 00:41:09,827
e não compilar, é uma falha

709
00:41:11,267 --> 00:41:12,941
tio Bob

710
00:41:12,941 --> 00:41:14,363
primeiro, vc sugere

711
00:41:14,363 --> 00:41:17,347
que escrevamos testes antes do código

712
00:41:17,347 --> 00:41:20,633
depois nos diz, que precisamos parar de escrever testes

713
00:41:20,633 --> 00:41:22,664
no momento que eles não compilarem

714
00:41:22,664 --> 00:41:26,406
isso aconteceria a cada linha ou duas, tio Bob

715
00:41:26,406 --> 00:41:29,772
se precisamos parar, toda vez que tiver um erro

716
00:41:29,772 --> 00:41:32,455
como podemos completar um pensamento?

717
00:41:32,455 --> 00:41:36,775
sua lógica é seriamente falha

718
00:41:37,003 --> 00:41:39,778
sim, parece loucura, não parece?!

719
00:41:39,778 --> 00:41:43,236
é igual aquela pegada estranha dos polegares na frente

720
00:41:43,236 --> 00:41:46,043
que usa em uma pistola semi-automática

721
00:41:46,043 --> 00:41:50,923
ou aquele movimento bizarro que faz quando joga bola de boliche

722
00:41:50,923 --> 00:41:53,889
é justamente algo que vc não faria

723
00:41:53,889 --> 00:41:58,824
a não ser que seus instrutores
continuassem a importuná-los a fazer

724
00:41:58,824 --> 00:42:01,261
mas vai ficar ainda mais doido

725
00:42:01,261 --> 00:42:02,584
porque

726
00:42:02,584 --> 00:42:05,470
a terceira lei é ainda mais estranha

727
00:42:07,058 --> 00:42:08,990
a terceira lei é

728
00:42:08,990 --> 00:42:13,421
vc não tem permissão de escrever mais código de produçao

729
00:42:13,421 --> 00:42:15,963
do que o código para o teste atual passar

730
00:42:17,120 --> 00:42:18,258
tio Bob

731
00:42:18,258 --> 00:42:21,163
eu não vejo nenhuma lógica, em ter programadores

732
00:42:21,163 --> 00:42:23,753
constantemente indo e voltando

733
00:42:23,753 --> 00:42:26,886
entre código de produção e código de teste

734
00:42:26,886 --> 00:42:28,935
vc parece que está nos dizendo

735
00:42:28,930 --> 00:42:33,987
que não podemos escrever nada,
sem estar constantemente nos interrompendo

736
00:42:35,095 --> 00:42:37,323
sim, isto é exatamente o que eu estou te dizendo

737
00:42:37,323 --> 00:42:39,760
se vc seguir essa três leis

738
00:42:39,760 --> 00:42:43,661
vc estará preso em um ciclo que talvez demore 20 segundos

739
00:42:43,660 --> 00:42:46,166
vc vai escrever o suficiente para o teste falhar

740
00:42:46,166 --> 00:42:49,649
e vc vai ter que escrever código de produção
somente o suficiente para fazer passar

741
00:42:49,649 --> 00:42:52,492
e vc vai ficar quicando entre os dois

742
00:42:52,492 --> 00:42:55,538
teste pequeno, código pequeno

743
00:42:56,873 --> 00:42:58,049
tio Bob

744
00:42:58,049 --> 00:43:01,667
onde está a lógica nestas idéias?

745
00:43:01,667 --> 00:43:05,273
programar dessa forma, claramente será mais devagar e tedioso

746
00:43:05,273 --> 00:43:08,535
programadores estarão se interrompendo constantemente

747
00:43:08,535 --> 00:43:12,356
nunca serão capazes de terminar um único raciocínio

748
00:43:12,818 --> 00:43:15,507
programadores sabem como escrever código, tio Bob

749
00:43:15,507 --> 00:43:18,683
eles sabem escrever IFs e loops WHILE

750
00:43:18,683 --> 00:43:27,526
eles não precisam de leis absurdas
interferindo no que eles já sabem fazer

751
00:43:28,055 --> 00:43:29,347
veja

752
00:43:29,347 --> 00:43:32,129
eu entendo porque vc pensa isso

753
00:43:32,129 --> 00:43:34,873
eu pensei dessa forma uma vez

754
00:43:34,873 --> 00:43:38,910
então, antes de tirar sua conclusão final

755
00:43:38,910 --> 00:43:41,132
considere o seguinte

756
00:43:42,590 --> 00:43:44,043
tempo de Debug

757
00:43:46,196 --> 00:43:48,295
imagine um grupo de desenvolvedores

758
00:43:48,295 --> 00:43:50,443
seguindo essas três leis

759
00:43:50,609 --> 00:43:52,018
escolha um deles

760
00:43:52,018 --> 00:43:53,827
não importa quem

761
00:43:53,827 --> 00:43:55,673
e não importa quando

762
00:43:55,670 --> 00:43:58,498
em algum momento

763
00:43:58,498 --> 00:44:00,301
tudo o que eles estavam trabalhando

764
00:44:00,301 --> 00:44:03,433
executa e passa todos os testes

765
00:44:05,046 --> 00:44:07,612
e não importa quem vc escolha

766
00:44:09,027 --> 00:44:11,827
e não importa quando vc escolhe

767
00:44:13,021 --> 00:44:18,898
em algum momento, no último minuto ou
dois, três ou até mesmo cinco

768
00:44:18,898 --> 00:44:25,243
tudo em que eles estavam trabalhando,
executa e passa todos os teste

769
00:44:26,713 --> 00:44:29,021
de fato

770
00:44:29,489 --> 00:44:31,747
como seria sua vida

771
00:44:31,747 --> 00:44:36,227
se tudo sempre funcionasse em alguns minutos atrás

772
00:44:36,227 --> 00:44:39,076
quando debug vc acha que faria?

773
00:44:40,184 --> 00:44:41,261
claramente

774
00:44:41,261 --> 00:44:45,009
com tão pouco tempo investido, criando o defeito

775
00:44:45,009 --> 00:44:49,236
remover esse defeito, não seria prolongado

776
00:44:49,236 --> 00:44:49,950
certo

777
00:44:49,950 --> 00:44:53,427
digo, é difícil ter que gastar um monte de tempo debugando

778
00:44:53,427 --> 00:44:55,544
com algo que funcionou um minuto atrás

779
00:44:55,544 --> 00:44:58,036
a técnica mais comum de degug que eu conheço

780
00:44:58,036 --> 00:45:00,178
é apertar ctrl+z uma quantidade suficiente

781
00:45:00,178 --> 00:45:02,147
para desfazer a última coisa que vc fez,

782
00:45:02,147 --> 00:45:04,012
para que vc possa reescrever

783
00:45:05,009 --> 00:45:07,304
vc é bom com o debuger?

784
00:45:07,304 --> 00:45:09,870
vc sabe todas as teclas de atalho ?

785
00:45:09,870 --> 00:45:11,316
sabe setar um breakpoint?

786
00:45:11,316 --> 00:45:12,886
e depois um watchpoint?

787
00:45:12,886 --> 00:45:15,052
e passar pelo breakpoint 3 vezes

788
00:45:15,052 --> 00:45:17,126
e depois no segundo breakpoint 2 vezes

789
00:45:17,126 --> 00:45:20,726
e depois setar o watchpoint para que a variavél chegue no 37

790
00:45:20,726 --> 00:45:22,473
para começar a debugar

791
00:45:22,473 --> 00:45:25,932
vc é esse tipo de debuger campeão?

792
00:45:27,575 --> 00:45:29,889
esta não é uma habilidade a ser desejada

793
00:45:29,889 --> 00:45:31,858
vc não chega a ficar tão bom assim em debugar

794
00:45:31,858 --> 00:45:35,415
sem ter que passar um monte de tempo debugando

795
00:45:35,415 --> 00:45:38,326
eu não quero que gaste seu tempo debugando

796
00:45:38,326 --> 00:45:42,713
eu quero que gaste seu tempo, escrevendo código que funcione

797
00:45:44,080 --> 00:45:45,483
lógico

798
00:45:45,680 --> 00:45:47,747
um aumento em produtividade

799
00:45:47,747 --> 00:45:50,873
deve levar a um tempo de debug reduzido

800
00:45:50,873 --> 00:45:51,858
portanto

801
00:45:51,858 --> 00:45:56,227
habilidade alta em debug deve estar
relacionado com baixa produtividade

802
00:45:56,227 --> 00:45:58,227
facinante

803
00:45:58,978 --> 00:46:03,298
de fato, eu já perdi todas as minhas habilidades de debugger

804
00:46:03,298 --> 00:46:06,313
eu raramente uso um debugger

805
00:46:06,313 --> 00:46:07,920
eu ainda uso

806
00:46:07,920 --> 00:46:09,809
não frequentemente,

807
00:46:09,809 --> 00:46:10,984
mas em casos raros

808
00:46:10,984 --> 00:46:13,095
eu tenho que seguir algum bug.

809
00:46:13,095 --> 00:46:17,187
geralmente o que eu faço é setar um
breakpoint em um teste que está falhando

810
00:46:17,187 --> 00:46:20,676
e daí eu entro no código de produção uma ou duas vezes

811
00:46:20,676 --> 00:46:23,489
e eu vejo o bug, geralmente imediatamente

812
00:46:23,489 --> 00:46:28,024
porque está no código que eu
estava escrevendo à alguns minutos

813
00:46:29,390 --> 00:46:32,510
isto não significa que vc nunca terá bugs horríveis

814
00:46:32,510 --> 00:46:35,778
sabe aquele que demora um dia ou até mesmo uma semana para encontrar

815
00:46:35,778 --> 00:46:38,873
isso ainda é software, ainda é difícil

816
00:46:38,870 --> 00:46:40,830
mas se vc seguir essas três leis

817
00:46:40,830 --> 00:46:43,452
isso acontecerá muito menos frequente

818
00:46:44,701 --> 00:46:49,138
então se te disse que pode reduzir seu
tempo de debug em um fator de dois

819
00:46:49,138 --> 00:46:52,098
apenas seguindo essas 3 regras estúpidas

820
00:46:52,098 --> 00:46:54,320
vc acha que valeria a pena?

821
00:46:55,163 --> 00:46:59,649
na verdade eu acho que vc poderia
cortar seu tempo de debug em um fator de dez

822
00:46:59,649 --> 00:47:00,904
mas não vampos dizer isso

823
00:47:00,904 --> 00:47:03,698
vampos apenas assumir um fator de dois

824
00:47:03,698 --> 00:47:09,600
cortar seu tempo de debug pela metade,
faz essas três leis mais atraentes?

825
00:47:10,769 --> 00:47:14,184
seria um fator, tipo Bob

826
00:47:15,181 --> 00:47:16,935
bem, não responda ainda

827
00:47:16,935 --> 00:47:19,366
porque se vc seguir essas três regras

828
00:47:19,366 --> 00:47:21,433
vc ainda ganha...

829
00:47:22,904 --> 00:47:24,572
Documentação do design

830
00:47:26,418 --> 00:47:30,036
vc já integrou algum pacote de terceiro?

831
00:47:30,036 --> 00:47:33,156
de alguma forma, em algum dia eles te dão um arquivo zip

832
00:47:33,156 --> 00:47:36,363
e quando descompacta, vc tem todo o software

833
00:47:36,363 --> 00:47:39,384
e talvez também tenha um pdf

834
00:47:39,384 --> 00:47:41,889
esse pdf, seria um manual agradável

835
00:47:41,889 --> 00:47:44,024
escrito por um técnico

836
00:47:44,024 --> 00:47:48,480
no final desse manual, tem uma seção feia de apêndice

837
00:47:48,480 --> 00:47:51,304
onde todos os exemplos de código estão

838
00:47:51,304 --> 00:47:54,024
qual o primeiro lugar que vc vai ?

839
00:47:55,403 --> 00:47:56,904
vc vai para os exemplos de código

840
00:47:56,904 --> 00:47:58,326
porque vc quer a verdade

841
00:47:58,326 --> 00:48:00,744
vc não quer ler o que o técnico escreveu

842
00:48:00,744 --> 00:48:04,080
vc quer ir até o código e
ver o que realmente está acontecendo

843
00:48:04,080 --> 00:48:07,360
se tiver sorte, vc pode copiar e colar esse código

844
00:48:07,360 --> 00:48:08,387
na sua aplicação

845
00:48:08,387 --> 00:48:10,978
e brincar com ele para fazer funcinar

846
00:48:12,129 --> 00:48:13,889
esses testes de unidade que escrevemos

847
00:48:13,889 --> 00:48:15,218
são os exemplos de código

848
00:48:15,218 --> 00:48:16,621
para o sistema inteiro

849
00:48:16,621 --> 00:48:18,455
quer saber como criar um objeto?

850
00:48:18,455 --> 00:48:22,904
aqui está o teste de unidade que cria o
objeto de todas as formas que pode ser criado

851
00:48:22,904 --> 00:48:25,766
quer saber como chamar uma função da API?

852
00:48:25,766 --> 00:48:31,089
tem testes de unidade que chamam essa
função de todas as formas que pode ser chamada

853
00:48:32,492 --> 00:48:35,753
os testes são documentos de design de baixo nível

854
00:48:35,753 --> 00:48:38,529
estão escritos em uma linguagem, que vc entende

855
00:48:38,529 --> 00:48:40,800
são totalemnte inequívocos

856
00:48:40,800 --> 00:48:43,489
são tão formais, que executam

857
00:48:43,489 --> 00:48:46,929
e não podem sair de sincronia com o código da aplicação

858
00:48:46,929 --> 00:48:50,683
são o tipo perfeito de documentação de design

859
00:48:51,846 --> 00:48:53,760
de fato tio Bob

860
00:48:53,760 --> 00:48:56,769
os custos de documentação sempre foram altos

861
00:48:56,769 --> 00:49:00,387
e sua confiabilidade sempre foi inadequada

862
00:49:00,578 --> 00:49:04,892
isto me parece que resolve logicamente esse problema

863
00:49:05,587 --> 00:49:08,012
então agora quanto vc pagaria ?

864
00:49:08,012 --> 00:49:10,012
bem, não responda ainda

865
00:49:10,012 --> 00:49:12,012
porque

866
00:49:13,396 --> 00:49:14,978
Desacoplamento

867
00:49:17,163 --> 00:49:19,323
quando escreve seus testes primeiro

868
00:49:19,323 --> 00:49:23,427
vai precisar modelar seu projeto para ser acessíveis para os testes

869
00:49:23,427 --> 00:49:25,895
como não escreveu o código do projeto ainda

870
00:49:25,895 --> 00:49:30,196
os testes tem uma influência tremenda na modelagem do projeto

871
00:49:30,196 --> 00:49:34,406
e essa influência, faz com que o código do projeto seja testável

872
00:49:34,406 --> 00:49:36,270
escrever testes primeiro

873
00:49:36,270 --> 00:49:39,458
torna o código do projeto testável

874
00:49:40,609 --> 00:49:42,473
e outra palavra para testavel!?

875
00:49:42,473 --> 00:49:44,203
é desacoplado

876
00:49:44,203 --> 00:49:46,701
a única forma de testar linhas de código

877
00:49:46,701 --> 00:49:49,193
é acessar elas dos testes

878
00:49:49,193 --> 00:49:51,852
mas a única forma de acessar elas dos testes

879
00:49:51,852 --> 00:49:54,923
é desacoplar as funções que às contem

880
00:49:56,695 --> 00:49:59,292
então, o ato de escrever testes primeiro

881
00:49:59,292 --> 00:50:03,575
causa vc ter, um sistema mais desacoplado do que o contrário

882
00:50:03,575 --> 00:50:04,849
em resumo

883
00:50:04,840 --> 00:50:06,221
vc consegue um design melhor

884
00:50:06,221 --> 00:50:09,218
simplesmente por escrever seus testes primeiro

885
00:50:10,393 --> 00:50:12,196
incrível

886
00:50:12,289 --> 00:50:15,680
o grande e procurado objetivo de sistemas desacoplados

887
00:50:15,680 --> 00:50:19,716
de repente se mostra trivial através da produção de testes

888
00:50:20,633 --> 00:50:21,624
tio Bob

889
00:50:21,624 --> 00:50:24,836
Eu estou de fato, intrigado

890
00:50:25,489 --> 00:50:27,489
e então vc consegue

891
00:50:27,489 --> 00:50:29,421
reduzir tempo de debug

892
00:50:29,421 --> 00:50:33,415
documentação completa e de baixo nível

893
00:50:33,415 --> 00:50:35,975
e até mesmo melhorar a modelagem

894
00:50:35,975 --> 00:50:39,341
e agora, quanto vc pagaria ?

895
00:50:39,415 --> 00:50:40,418
bem...

896
00:50:40,418 --> 00:50:42,935
não responda ainda...

897
00:50:42,935 --> 00:50:48,904
porque vc também ganha algo que vale
mais do que todas essas coisas juntas

898
00:50:50,523 --> 00:50:52,418
Coragem para alterar

899
00:50:54,240 --> 00:50:56,098
Lembra do episódio 1?

900
00:50:56,098 --> 00:50:58,720
falamos como o código apodrece?

901
00:50:58,720 --> 00:51:02,492
como ele degrada igual
um pedaçop de carne podre?

902
00:51:03,876 --> 00:51:06,818
no último segmento, nós identificamos porque isso acontece

903
00:51:06,818 --> 00:51:11,981
acontece, porque desenvolvedores ficam com muito medo de limpar

904
00:51:13,396 --> 00:51:17,156
mas e se você pudesse fazer isto

905
00:51:17,150 --> 00:51:20,024
e se pudesse rodar um conjunto de testes

906
00:51:20,036 --> 00:51:23,612
que prova com um alto grau de confiança

907
00:51:23,630 --> 00:51:25,489
que o sistema funcionou

908
00:51:25,489 --> 00:51:30,516
e se vc soubesse que esses testes,
cobrem praticamente tudo dentro do sistema

909
00:51:30,516 --> 00:51:34,812
e se vc confiasse implicitamente nesses testes

910
00:51:35,790 --> 00:51:39,206
os testes iriam eliminar o medo

911
00:51:40,129 --> 00:51:41,913
está exatamente correto

912
00:51:41,913 --> 00:51:45,150
não ficaria com medo de alterar o código

913
00:51:45,150 --> 00:51:48,184
vc poderia ver um pedaço de código feio

914
00:51:48,184 --> 00:51:52,707
e poderia concertar uma pequena parte, limpar um pouco

915
00:51:52,707 --> 00:51:56,326
depois poderia rodar os testes e ver se não quebrou nada

916
00:51:56,326 --> 00:51:58,824
e depois poderia limpar um pouco mais

917
00:51:58,824 --> 00:52:02,369
rodar os testes e ver se não quebrou nada

918
00:52:02,369 --> 00:52:05,427
poderia repetir isso de novo e de novo

919
00:52:05,427 --> 00:52:08,221
limpar, testar

920
00:52:08,221 --> 00:52:11,415
os testes, te permitem limpar o código

921
00:52:11,415 --> 00:52:15,021
os testes, impedem o código de apodrecer

922
00:52:16,276 --> 00:52:20,763
e esse é o poder dessas três leis do TDD

923
00:52:20,763 --> 00:52:24,307
o conjunto de testes que resultam ao seguir essas três leis

924
00:52:24,307 --> 00:52:26,326
elimina o medo de mudança

925
00:52:26,326 --> 00:52:28,972
se ver algo meio bagunçado

926
00:52:28,972 --> 00:52:30,276
vc apenas limpa

927
00:52:30,276 --> 00:52:31,790
vc nem pensa sobre isso

928
00:52:31,790 --> 00:52:34,006
porrue o medo não existe

929
00:52:34,006 --> 00:52:36,295
testes vão te proteger

930
00:52:36,295 --> 00:52:39,353
de quebrar qualquer coisa

931
00:52:40,504 --> 00:52:42,609
ah.. os testes não são perfeitos

932
00:52:42,609 --> 00:52:45,470
vc nunca pode ter segurança perfeita

933
00:52:45,470 --> 00:52:48,196
mas esses testes podem ser muito bons

934
00:52:48,196 --> 00:52:52,313
tão bons, que vc não terá medio de alterar o código

935
00:52:53,513 --> 00:52:55,963
gostaria que pensasse sobre algo

936
00:52:56,892 --> 00:53:01,680
porque design e arquitetura são consideradas tão importante

937
00:53:01,680 --> 00:53:04,984
porque existem tantos livros sobre esses tópicos

938
00:53:04,984 --> 00:53:07,680
porque tanto esforfo é aplicado

939
00:53:07,680 --> 00:53:10,560
para fazer  design e arquitetura corretos

940
00:53:11,960 --> 00:53:14,830
é porque queremos que a estrutura do sistema

941
00:53:14,830 --> 00:53:18,436
seja flexível, sustentável e escalável

942
00:53:18,436 --> 00:53:19,938
quando adicionamos uma feature novas

943
00:53:19,938 --> 00:53:23,858
queremos ter certeza que a estrutura do sistema seja flexível o bastante

944
00:53:23,858 --> 00:53:27,120
para permitir essas alterações sem quebrar nada

945
00:53:28,578 --> 00:53:33,083
e bons designs, mantém sistemas
flexíveis e sustentáveis

946
00:53:34,307 --> 00:53:38,036
mas nada faz um sistema mais
flexível do que um conjunto de testes

947
00:53:38,036 --> 00:53:40,510
por uma enorme ordem de magnetude

948
00:53:40,510 --> 00:53:44,473
porque esse conjunto de testes elimina medo

949
00:53:46,061 --> 00:53:49,630
se eu te der um sistema perfeitamente modelado

950
00:53:49,630 --> 00:53:51,729
mas sem testes

951
00:53:51,809 --> 00:53:53,938
vc ficará com medo de limpar

952
00:53:53,938 --> 00:53:55,975
vc terá medo de melhorá-lo

953
00:53:55,975 --> 00:53:57,618
então com o tempo

954
00:53:57,618 --> 00:54:00,572
ele vai gradualmente apodrecer

955
00:54:01,224 --> 00:54:01,870
de outro lado

956
00:54:01,870 --> 00:54:04,978
se eu te dar um sistema terrivelmente modelado

957
00:54:04,978 --> 00:54:07,821
mas um conjunto de testes extenso

958
00:54:07,821 --> 00:54:10,541
vc não terá medo de melhorá-lo

959
00:54:10,541 --> 00:54:12,135
então, com o tempo

960
00:54:12,135 --> 00:54:15,120
ele gradualmente ficará cada vez melhor

961
00:54:16,381 --> 00:54:18,184
a grande lição

962
00:54:18,184 --> 00:54:20,560
vc quer um sistema flexível?

963
00:54:20,560 --> 00:54:23,280
consiga um conjunto de testes que vc confie

964
00:54:24,806 --> 00:54:26,486
lógico, tio Bob

965
00:54:26,486 --> 00:54:28,584
totalmente lógico

966
00:54:28,584 --> 00:54:32,073
mas essa lógica procede com
uma premissa questionável:

967
00:54:32,073 --> 00:54:35,058
que vc confie nos testes

968
00:54:35,058 --> 00:54:38,843
vc ainda não estabeleceu como
essa confiança é adquirida

969
00:54:41,021 --> 00:54:42,923
confiança

970
00:54:44,750 --> 00:54:48,381
quanta confiança vc deve ter nesses testes?

971
00:54:48,381 --> 00:54:52,153
quero que pense nesses testes como um paraquedas

972
00:54:52,153 --> 00:54:54,492
com o qual vc irá pular fora de um avião

973
00:54:54,492 --> 00:54:56,830
isso é quanto vc tem que confiar neles

974
00:54:56,830 --> 00:54:58,166
depois de tudo

975
00:54:58,166 --> 00:55:00,018
alterar um sistema que funciona

976
00:55:00,018 --> 00:55:01,230
é muito arriscado

977
00:55:01,230 --> 00:55:04,264
é muito parecido com pular de um avião

978
00:55:04,264 --> 00:55:07,261
e é bom vc ter um bom paraquedas

979
00:55:08,584 --> 00:55:13,003
como vc consegue um bom
conjunto de testes que vc confie?

980
00:55:13,372 --> 00:55:15,058
siga as três leis

981
00:55:15,058 --> 00:55:16,596
siga elas implicitamente

982
00:55:16,596 --> 00:55:18,492
sila elas sempre

983
00:55:18,492 --> 00:55:21,372
se toda linha de código do projeto foi feito

984
00:55:21,372 --> 00:55:24,141
para fazer um teste de unidade passar

985
00:55:24,141 --> 00:55:26,818
então vc irá confiar nos seus testes

986
00:55:28,067 --> 00:55:29,464
se, de outro lado,

987
00:55:29,464 --> 00:55:32,055
vc escrever seus testes depois do fato

988
00:55:32,055 --> 00:55:34,061
então vc nunca confiará nos seus testes

989
00:55:34,061 --> 00:55:37,027
vc sempre achará que tem furos neles

990
00:55:37,027 --> 00:55:38,603
isso porque,

991
00:55:38,600 --> 00:55:39,920
testar depois do fato

992
00:55:39,920 --> 00:55:41,243
é tedioso

993
00:55:41,240 --> 00:55:45,304
vc já sabe que o código funciona,
pois já testou manualmente

994
00:55:46,756 --> 00:55:48,676
escrever o teste depois do fato

995
00:55:48,676 --> 00:55:51,895
é como se fosse uma marco processual

996
00:55:51,895 --> 00:55:55,384
não é uma parte necessária para fazer seu código funcionar

997
00:55:55,384 --> 00:55:58,326
vc já sabe que funciona, pois já testou manualmente

998
00:55:58,320 --> 00:56:03,378
então parece uma perda de tempo

999
00:56:03,378 --> 00:56:06,960
e isso significa que irá tomar atalhos

1000
00:56:06,960 --> 00:56:10,953
irá tomar atalhos com seu paraquedas

1001
00:56:11,710 --> 00:56:13,310
existe algumas partes do código

1002
00:56:13,310 --> 00:56:16,147
que são difíceis de se escrever testes

1003
00:56:16,147 --> 00:56:17,593
vc testou manualmente

1004
00:56:17,593 --> 00:56:19,181
então sabe que funcionam

1005
00:56:19,181 --> 00:56:23,360
portanto vc não acha necessário
escrever um teste de unidade

1006
00:56:23,360 --> 00:56:26,830
então seus testes tem furos

1007
00:56:26,830 --> 00:56:29,138
e vc não iria pular de um avião

1008
00:56:29,138 --> 00:56:31,476
quando seu paraquedas tem furos

1009
00:56:33,261 --> 00:56:34,984
conclusão

1010
00:56:36,886 --> 00:56:38,960
essas três leis do TDD

1011
00:56:38,960 --> 00:56:41,563
podem ter soado bem estúpidas no começo

1012
00:56:41,563 --> 00:56:45,993
mas nada teve um efeito profundo na forma que softwares são feitos

1013
00:56:45,993 --> 00:56:48,498
desde à invenção do editor de tela

1014
00:56:48,498 --> 00:56:49,581
essas três leis

1015
00:56:49,581 --> 00:56:50,843
muda a forma que vc trabalha

1016
00:56:50,843 --> 00:56:53,083
de minuto a minuto

1017
00:56:53,080 --> 00:56:54,738
e essa mudança resulta em

1018
00:56:54,738 --> 00:56:56,320
menos debug

1019
00:56:56,320 --> 00:56:58,966
documentação de baixo nível confiável

1020
00:56:58,966 --> 00:57:00,966
designs desacoplados

1021
00:57:00,966 --> 00:57:05,138
e a coragem para limpar e alterar código

1022
00:57:05,138 --> 00:57:06,566
nada que eu já encontrei

1023
00:57:06,566 --> 00:57:11,033
tem prevenido e revertido apodrecimento de código

1024
00:57:11,033 --> 00:57:13,778
mais do que as três leis do TDD

1025
00:57:15,489 --> 00:57:16,701
sim, tio Bob

1026
00:57:16,701 --> 00:57:18,418
agora eu vi tudo

1027
00:57:18,418 --> 00:57:20,584
a lógica é impecável

1028
00:57:21,003 --> 00:57:23,120
mas aquilo que é lógico

1029
00:57:23,120 --> 00:57:25,895
não é necessariamente prático

1030
00:57:25,890 --> 00:57:28,861
vc tem um argumento lógico fraco

1031
00:57:28,861 --> 00:57:33,686
se não conseguir estabelecer que TDD também é prático

1032
00:57:34,787 --> 00:57:38,492
então o tempo chegou para clarificações

1033
00:57:39,286 --> 00:57:42,486
permita mostrar uma demonstração

1034
00:57:47,193 --> 00:57:53,624
continua...

1035
00:57:55,298 --> 00:57:55,932
então

1036
00:57:56,596 --> 00:57:59,310
espero que tenham gostado da parte 1

1037
00:57:59,310 --> 00:58:03,489
parte 2 continua bem de onde parou

1038
00:58:03,489 --> 00:58:05,593
com a demonstração

1039
00:58:05,593 --> 00:58:09,212
é uma apresentação de meia hora de uma das primeiras

1040
00:58:09,212 --> 00:58:12,615
e mais populares demonstrações de TDD

1041
00:58:12,615 --> 00:58:14,240
o Jogo de Boliche

1042
00:58:14,240 --> 00:58:17,347
vc verá ir de uma rápida seção de modelagem

1043
00:58:17,347 --> 00:58:20,289
para uma enxurrada de ciclos vermelho-verde

1044
00:58:20,289 --> 00:58:22,960
para vários refatoramentos

1045
00:58:22,960 --> 00:58:26,793
até o final chocante e surpreendente

1046
00:58:27,433 --> 00:58:29,120
depois da demonstração

1047
00:58:29,120 --> 00:58:31,993
irei responder as objeções e reclamações

1048
00:58:31,993 --> 00:58:34,375
do nosso visitante do universo paralelo

1049
00:58:34,375 --> 00:58:38,135
vou dizer porque TDD não é lento

1050
00:58:38,135 --> 00:58:41,009
e vou dizer o que fazer, se o seu gerente

1051
00:58:41,000 --> 00:58:44,080
se ele reclamar de tantos testes que vc anda escrevendo

1052
00:58:44,080 --> 00:58:47,064
vou dizer quem testa os testes

1053
00:58:47,064 --> 00:58:51,329
e porque não importa que testes não podem provar corretude

1054
00:58:51,329 --> 00:58:52,769
vou responder a acusação

1055
00:58:52,769 --> 00:58:55,680
que TDD é muito dogmático

1056
00:58:55,680 --> 00:58:59,095
e vou dizer o porque, escrever testes por último

1057
00:58:59,095 --> 00:59:01,040
é uma estratégia falha

1058
00:59:01,341 --> 00:59:03,526
falaremos de códigos legado

1059
00:59:03,526 --> 00:59:06,713
e como testar GUIs e banco de dados

1060
00:59:06,713 --> 00:59:10,283
e vou dizer o que penso sobre programadores

1061
00:59:10,283 --> 00:59:12,412
que não querem escrever testes

1062
00:59:12,412 --> 00:59:16,153
e acham que TDD é muito difícil

1063
00:59:16,516 --> 00:59:17,544
finalmente

1064
00:59:17,544 --> 00:59:20,043
falaremos sobre profissionalismo

1065
00:59:20,043 --> 00:59:23,944
e porque TDD é uma parte essencial

1066
00:59:23,944 --> 00:59:26,221
de diciplina profissional

1067
00:59:28,695 --> 00:59:35,575
Traduzido por André Castilho

